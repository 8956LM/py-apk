name: Build APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - List project directory
        run: |
          ls -la

      - name: Clean environment
        run: |
          sudo rm -rf /usr/local/lib/android/sdk
          rm -rf .buildozer bin
          echo "环境清理完成"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Enable i386 architecture
        run: |
          sudo dpkg --add-architecture i386
          echo "i386 架构已启用"

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            unzip \
            libc6:i386 \
            lib32stdc++6 \
            lib32z1 \
            zlib1g-dev \
            libncurses6:i386 \
            libstdc++-12-dev \
            libstdc++-12-dev:i386 \
            libx11-6:i386 \
            gcc-multilib \
            g++-multilib
          echo "系统依赖安装完成"

      - name: Create buildozer.spec
        run: |
          cat <<EOF > buildozer.spec
          [app]
          title = MyApp
          package.name = pythonapp
          package.domain = com.example
          source.dir = .
          requirements = python3,kivy
          version = 0.1
          
          # Android配置
          android.sdk_path = /usr/local/lib/android/sdk
          android.ndk_path = /home/runner/.buildozer/android/platform/android-ndk-r25b
          android.build_tools_version = 33.0.2
          android.api = 33
          android.minapi = 21
          android.ndk_api = 23
          android.accept_sdk_license = True

          [buildozer]
          log_level = 2
          EOF
          echo "buildozer.spec 创建成功"

      - name: Create Gradle wrapper properties
        run: |
          mkdir -p gradle/wrapper
          cat <<EOF > gradle/wrapper/gradle-wrapper.properties
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https://services.gradle.org/distributions/gradle-7.4.2-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          echo "gradle-wrapper.properties 创建成功"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install Android SDK
        run: |
          ANDROID_HOME=/usr/local/lib/android/sdk
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          
          # 创建干净的目录结构
          sudo mkdir -p $ANDROID_HOME
          sudo chown -R runner:runner $ANDROID_HOME
          
          # 安装命令行工具
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/cmdline-tools.zip
          unzip -q /tmp/cmdline-tools.zip -d /tmp/cmdline-tools
          
          # 移动文件到正确位置
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          mv /tmp/cmdline-tools/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/
          rm -rf /tmp/cmdline-tools*

          # 配置环境变量
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH" >> $GITHUB_ENV

          # 接受许可证
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME --licenses || true

          # 安装核心组件
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME \
            "platform-tools" \
            "build-tools;33.0.2" \
            "platforms;android-33" \
            "cmdline-tools;latest"

          # 验证安装
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$ANDROID_HOME
          echo "Android SDK 安装验证通过"

      - name: Install NDK
        run: |
          mkdir -p ~/.buildozer/android/platform
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip -d ~/.buildozer/android/platform/
          rm android-ndk-r25b-linux.zip
          echo "NDK r25b 安装完成"

      - name: Pre-build verification
        run: |
          echo "=== 关键路径验证 ==="
          ls -la /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager
          ls -la /usr/local/lib/android/sdk/tools/bin/sdkmanager || echo "旧路径不存在（符合预期）"
          
          echo "=== 环境变量 ==="
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "JAVA_HOME=$JAVA_HOME"
          echo "PATH=$PATH"
          
          echo "=== SDK组件列表 ==="
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list --sdk_root=$ANDROID_HOME
          
          echo "=== C++ 编译器验证 ==="
          g++ --version
          echo "32位库验证:"
          dpkg -l | grep libstdc++

      - name: Install Buildozer and dependencies
        run: |
          # 先安装Cython
          pip install --upgrade cython
          echo "Cython 安装完成，版本: $(cython --version)"
          
          # 再安装Buildozer
          pip install --upgrade buildozer
          buildozer --version

      - name: Build APK
        run: |
          mkdir -p bin
          
          # 覆盖Buildozer缓存配置
          mkdir -p ~/.buildozer/android/platform
          echo "[buildozer]" > ~/.buildozer/android/platform/buildozer.ini
          echo "android_sdk_dir = $ANDROID_HOME" >> ~/.buildozer/android/platform/buildozer.ini
          echo "android_ndk_dir = /home/runner/.buildozer/android/platform/android-ndk-r25b" >> ~/.buildozer/android/platform/buildozer.ini
          
          # 直接在当前shell中设置环境变量
          export ANDROID_HOME=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          
          # 验证sdkmanager路径
          echo "=== sdkmanager路径验证 ==="
          which sdkmanager
          ls -la $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager
          
          # 创建符号链接，使旧路径指向新路径
          mkdir -p $ANDROID_HOME/tools/bin
          ln -s $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager
          echo "创建了从旧路径到新路径的符号链接"
          
          # 验证符号链接
          echo "=== 符号链接验证 ==="
          ls -la $ANDROID_HOME/tools/bin/sdkmanager
          
          # 执行构建并捕获详细日志
          # 使用--force参数强制重新检查所有配置
          ANDROID_HOME=$ANDROID_HOME PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH buildozer -v --force android debug 2>&1 | tee build.log
          
          # 构建后验证
          if [ ! -f bin/*.apk ]; then
            echo "=== 构建失败分析 ==="
            echo "最后100行日志："
            tail -n 100 build.log
            echo "常见问题排查："
            echo "1. 检查是否缺少依赖库：sudo apt-get install libc6:i386 libstdc++-12-dev libstdc++-12-dev:i386"
            echo "2. 确认ANDROID_HOME路径正确：ls -la $ANDROID_HOME"
            echo "3. 验证平台工具版本：确保android.api=33对应platforms;android-33"
            echo "4. 检查NDK安装：ls -la /home/runner/.buildozer/android/platform/android-ndk-r25b"
            echo "5. 检查Cython是否正确安装：pip show cython"
            echo "6. 验证sdkmanager路径：which sdkmanager"
            echo "7. 确认新的sdkmanager路径：ls -la $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
            echo "8. 检查符号链接：ls -la $ANDROID_HOME/tools/bin/sdkmanager"
            exit 1
          fi

          mkdir -p artifacts
          cp bin/*.apk artifacts/
          echo "APK构建成功！"

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: apk-artifacts
          path: artifacts/
